-- IF U ARE SMART U CAN SCROLL DOWN TO CHANGE THE SETS | CTRL + F SEARCH: R_Assign_Predict

getgenv().Toggle_Key = "c"


getgenv().Rejoin_Key = "="


getgenv().ChangeFovSettings = {

	FOV_Filled = false;
	FOV_VisibleOrNot = true;
	FOV_Transparency = .35;
	FOV_Thickness = 1;
	FOV_RADIUS = 250;
	FOV_Color = Color3.fromRGB(200, 200, 255);

};


getgenv = getgenv
Drawing = Drawing
setreadonly = setreadonly
newcclosure = newcclosure
getrawmetatable = getrawmetatable
getnamecallmethod = getnamecallmethod


local IsToggled = false
local EventName = "GetMousePos"
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Network_Status = game:GetService("Stats")
local RunService = game:GetService("RunService")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")
local TheRemote = game:GetService("ReplicatedStorage").MainEvent


local FOV_CIRCLE = Drawing.new("Circle")
FOV_CIRCLE.Filled = getgenv().ChangeFovSettings.FOV_Filled
FOV_CIRCLE.Color = getgenv().ChangeFovSettings.FOV_Color
FOV_CIRCLE.Radius = getgenv().ChangeFovSettings.FOV_RADIUS
FOV_CIRCLE.Thickness = getgenv().ChangeFovSettings.FOV_Thickness
FOV_CIRCLE.Visible = getgenv().ChangeFovSettings.FOV_VisibleOrNot
FOV_CIRCLE.Transparency = getgenv().ChangeFovSettings.FOV_Transparency
FOV_CIRCLE.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)


local Move_FOV = nil
Move_FOV = RunService.RenderStepped:Connect(function()
	FOV_CIRCLE.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
end)

Mouse.KeyDown:Connect(function(Rejoin)
	if Rejoin == (getgenv().Rejoin_Key:lower()) then
		game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer) task.wait()
	end
end)


function InRadius()
	local Target = nil
	local Distance = 9e9
	local Camera = game:GetService("Workspace").CurrentCamera
	for _, v in pairs(Players:GetPlayers()) do 
		if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
			local Enemy = v.Character
			local CastingFrom = CFrame.new(Camera.CFrame.Position, Enemy:FindFirstChild("Head").CFrame.Position) * CFrame.new(0, 0, -4)
			local RayCast = Ray.new(CastingFrom.Position, CastingFrom.LookVector * 9000)
			local World, ToSpace = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(RayCast, {LocalPlayer.Character:FindFirstChild("Head")});
			local RootWorld = (Enemy:FindFirstChild("Head").CFrame.Position - ToSpace).magnitude
			if RootWorld < 4 then		
				local RootPartPosition, Visible = Camera:WorldToViewportPoint(Enemy:FindFirstChild("Head").Position)
				if Visible then
					local Real_Magnitude = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(RootPartPosition.X, RootPartPosition.Y)).Magnitude
					if Real_Magnitude < Distance and Real_Magnitude < FOV_CIRCLE.Radius then
						Distance = Real_Magnitude
						Target = Enemy
					end
				end
			end
		end
	end
	return Target
end

local Base_Prediction = (.01)
local Automated_Prediction = true
local Update_Prediction = nil
local Last_Prediction_Value = nil
function AutoPredict()
	if Automated_Prediction then
		local Average_Ping = Network_Status.PerformanceStats.Ping:GetValue()
		local Rounded_Ping = math.round(Average_Ping)
		local N_Possibilities = { --#Possible Ping(s), Rounded To The Nearest 10.

			5,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180 --#SETS_COUNT [ 17 ]

		};
		local R_Assign_Predict = { --#Assign Prediction Values Per Sets.

			.158,.16,.163,.165,.166,.168,.17,.171,.173,.174,.176,.178,.181,.184,.188,.19,.23,.27,.32 --#SETS_COUNT [ 17 ]

		};
		if (Rounded_Ping) <= (N_Possibilities[1]) then
			Base_Prediction = (R_Assign_Predict[1])
		elseif (Rounded_Ping) <= (N_Possibilities[2]) then
			Base_Prediction = (R_Assign_Predict[2])
		elseif (Rounded_Ping) <= (N_Possibilities[3]) then
			Base_Prediction = (R_Assign_Predict[3])
		elseif (Rounded_Ping) <= (N_Possibilities[4]) then
			Base_Prediction = (R_Assign_Predict[4])
		elseif (Rounded_Ping) <= (N_Possibilities[5]) then
			Base_Prediction = (R_Assign_Predict[5])
		elseif (Rounded_Ping) <= (N_Possibilities[6]) then
			Base_Prediction = (R_Assign_Predict[6])
		elseif (Rounded_Ping) <= (N_Possibilities[7]) then
			Base_Prediction = (R_Assign_Predict[7])
		elseif (Rounded_Ping) <= (N_Possibilities[8]) then
			Base_Prediction = (R_Assign_Predict[8])
		elseif (Rounded_Ping) <= (N_Possibilities[9]) then
			Base_Prediction = (R_Assign_Predict[9])
		elseif (Rounded_Ping) <= (N_Possibilities[10]) then
			Base_Prediction = (R_Assign_Predict[10])
		elseif (Rounded_Ping) <= (N_Possibilities[11]) then
			Base_Prediction = (R_Assign_Predict[11])
		elseif (Rounded_Ping) <= (N_Possibilities[12]) then
			Base_Prediction = (R_Assign_Predict[12])
		elseif (Rounded_Ping) <= (N_Possibilities[13]) then
			Base_Prediction = (R_Assign_Predict[13])
		elseif (Rounded_Ping) <= (N_Possibilities[14]) then
			Base_Prediction = (R_Assign_Predict[14])
		elseif (Rounded_Ping) <= (N_Possibilities[15]) then
			Base_Prediction = (R_Assign_Predict[15])
		elseif (Rounded_Ping) <= (N_Possibilities[16]) then
			Base_Prediction = (R_Assign_Predict[16])
		elseif (Rounded_Ping) > (N_Possibilities[17]) then
			Base_Prediction = (R_Assign_Predict[17])
		end
	end
end

Update_Prediction = RunService.Stepped:Connect(function()
	if Automated_Prediction then
		AutoPredict()
		Last_Prediction_Value = Base_Prediction
	elseif Automated_Prediction == false then
		Base_Prediction = Last_Prediction_Value / 1.2
	end
end)


local Draw = Drawing.new
local Square = Drawing.new("Square")
Square.Visible = false
Square.Color = Color3.fromRGB(85, 255, 255)
Square.Thickness = 20
Square.Size = Vector2.new(20,20)
Square.Filled = true

local Enemy = nil
local Branded_Plr = nil
function GrabSilentRadius()
	pcall(function()
		if IsToggled then
			Enemy = InRadius()
			if Enemy ~= nil then
				Branded_Plr = Enemy
			elseif Enemy == nil then
				Branded_Plr = nil
			end
		end
	end)
end

Mouse.KeyDown:Connect(function(Toggled)
	if Toggled == (getgenv().Toggle_Key:lower()) then
		if IsToggled == false then
			IsToggled = true
			GrabSilentRadius()
		elseif IsToggled == true then
			IsToggled = false
			Enemy = nil
			Branded_Plr = nil
			Square.Visible = false
		end
	end
end)


AimAt = {
	Head = "Head";
	Torso = "HumanoidRootPart";
	UpperTorso = "UpperTorso"
};


gmt = getrawmetatable(game)
SilentIndex = gmt.__namecall
setreadonly(gmt, false)
gmt.__namecall = newcclosure(function(...)
	local Args = {...};
	local Target = Branded_Plr
	if IsToggled and getnamecallmethod() == "FireServer" and Args[2] == "GetMousePos" then
		local What = Target[AimAt.Torso].Position + Target[AimAt.Torso].AssemblyLinearVelocity * Base_Prediction --Target:FindFirstChild("HumanoidRootPart").Position + (Target:FindFirstChild("HumanoidRootPart").Velocity)
		Args[3] = What
		return SilentIndex(unpack(Args))
	end
	return SilentIndex(...)
end)


RunService.Stepped:Connect(function()
	pcall(function()
		if Branded_Plr ~= nil then
			local Vector, OnScreen = game:GetService("Workspace").CurrentCamera:WorldToViewportPoint(Branded_Plr:FindFirstChild("HumanoidRootPart").Position + (Branded_Plr:FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity * Base_Prediction))
			if OnScreen then
				Square.Visible = true
				Square.Position = Vector2.new(Vector.X,Vector.Y)
			end
		end
	end)
end)
